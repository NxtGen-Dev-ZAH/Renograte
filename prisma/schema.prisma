generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(cuid())
  name               String?
  email              String?              @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  role               String               @default("user")
  accounts           Account[]
  listings           Listing[]
  memberProfile      MemberProfile?
  offers             Offer[]
  passwordResetToken PasswordResetToken?
  sessions           Session[]
  tasks              Task[]
  courseProgress     UserCourseProgress[]
  customFields       UserCustomFields?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  id         String   @id @default(cuid())

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String   @unique
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Lead {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String
  roles     String[]
  address   String?
  status    String   @default("new")
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Listing {
  id               String    @id @default(cuid())
  title            String
  address          String
  city             String
  state            String
  zipCode          String
  description      String
  propertyType     String
  bedrooms         Int
  bathrooms        Float
  squareFootage    Int
  lotSize          String?
  yearBuilt        Int?
  listingPrice     Float
  afterRepairValue Float
  renovationCost   Float
  termsAvailable   String
  additionalTerms  String?
  photos           String[]
  videoUrl         String?
  virtualTourUrl   String?
  status           String    @default("pending")
  agentId          String
  adminFeedback    String?
  reviewedAt       DateTime?
  reviewedBy       String?
  isVisible        Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  latitude         Float?
  longitude        Float?
  agent            User      @relation(fields: [agentId], references: [id], onDelete: Cascade)
}

model MemberProfile {
  id            String   @id @default(cuid())
  userId        String   @unique
  company       String?
  phone         String
  businessType  String
  licenseNumber String?
  plan          String
  billingCycle  String
  status        String   @default("pending")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserCustomFields {
  id               String   @id @default(cuid())
  userId           String   @unique
  website          String?
  agencyName       String?
  title            String?
  license          String?
  whatsapp         String?
  taxNumber        String?
  faxNumber        String?
  languages        String[]
  serviceAreas     String[]
  specialties      String[]
  aboutAgency      String?
  facebookUsername String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Offer {
  id               String    @id @default(cuid())
  propertyAddress  String
  propertyType     String
  listingPrice     String
  offerAmount      String
  earnestMoney     String
  closingDate      String
  financing        String?
  downPayment      String?
  loanAmount       String?
  inspectionPeriod String?
  contingencies    String?
  status           String    @default("PENDING")
  adminFeedback    String?
  reviewedAt       DateTime?
  reviewedBy       String?
  userId           String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Course {
  id          String               @id @default(cuid())
  title       String
  description String
  category    String
  thumbnail   String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  videos      CourseVideo[]
  progress    UserCourseProgress[]
}

model CourseVideo {
  id          String               @id @default(cuid())
  title       String
  description String
  videoUrl    String
  duration    Int
  order       Int
  courseId    String
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  course      Course               @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    UserCourseProgress[]

  @@index([courseId])
}

model UserCourseProgress {
  id             String      @id @default(cuid())
  userId         String
  courseId       String
  videoId        String
  completed      Boolean     @default(false)
  watchedSeconds Int         @default(0)
  lastPosition   Int         @default(0)
  completedAt    DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  course         Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  video          CourseVideo @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
  @@index([userId])
  @@index([courseId])
  @@index([videoId])
}

model Contract {
  id            String                 @id @default(cuid())
  title         String
  description   String?
  documentUrl   String
  status        String                 @default("PENDING")
  createdBy     String
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  sections      ContractSection[]
  signatures    ContractSignature[]
  signingTokens ContractSigningToken[]
}

model ContractSection {
  id          String             @id @default(cuid())
  contractId  String
  title       String
  description String?
  pageNumber  Int
  role        String
  required    Boolean            @default(true)
  status      String             @default("PENDING")
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  contract    Contract           @relation(fields: [contractId], references: [id], onDelete: Cascade)
  signature   ContractSignature?

  @@index([contractId])
}

model ContractSignature {
  id            String          @id @default(cuid())
  contractId    String
  sectionId     String          @unique
  signatureData String
  signerName    String
  signerEmail   String
  signerRole    String
  signedAt      DateTime        @default(now())
  ipAddress     String?
  contract      Contract        @relation(fields: [contractId], references: [id], onDelete: Cascade)
  section       ContractSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@index([contractId])
  @@index([sectionId])
}

model ContractSigningToken {
  id         String   @id @default(cuid())
  token      String   @unique
  contractId String
  role       String
  email      String?
  name       String?
  isUsed     Boolean  @default(false)
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@index([contractId])
  @@index([token])
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime?
  priority    String    @default("medium")
  status      String    @default("pending")
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
